<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Put some ink into the inkpot</title>
    <link href="https://onemouth.github.io/atom.xml" rel="self" />
    <link href="https://onemouth.github.io" />
    <id>https://onemouth.github.io/atom.xml</id>
    <author>
        <name>LT Tsai</name>
        <email>lt@ltt.pw</email>
    </author>
    <updated>2022-07-14T00:00:00Z</updated>
    <entry>
    <title>[筆記] Go：Nil Map</title>
    <link href="https://onemouth.github.io/posts/2022-07-14-go-empty-map.html" />
    <id>https://onemouth.github.io/posts/2022-07-14-go-empty-map.html</id>
    <published>2022-07-14T00:00:00Z</published>
    <updated>2022-07-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <h1>[筆記] Go：Nil Map</h1>
    <section class="header">
        Posted on July 14, 2022
        
        by LT
        
    </section>
    <section>
        <div class="sourceCode" id="cb1"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">package</span> main</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="op">(</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>	<span class="st">&quot;fmt&quot;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="op">)</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>	<span class="kw">var</span> m <span class="kw">map</span><span class="op">[</span><span class="dt">string</span><span class="op">]</span><span class="dt">int</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>	fmt<span class="op">.</span>Println<span class="op">(</span>m<span class="op">[</span><span class="st">&quot;test&quot;</span><span class="op">])</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>	m<span class="op">[</span><span class="st">&quot;test&quot;</span><span class="op">]++</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>	fmt<span class="op">.</span>Println<span class="op">(</span>m<span class="op">[</span><span class="st">&quot;test&quot;</span><span class="op">])</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>上面這段code的輸出為0，然後panic。</p>
<p>在這個例子，m是一個nil map。在Go中，對nil map的有一些操作是“nil safe”的：</p>
<ul>
<li><code>len(m)</code>: 0</li>
<li><code>m[key]</code>
<ul>
<li>return the zero value for the value type if key is not in the map</li>
<li>return the value assoiated with the key if key is in the map</li>
</ul></li>
</ul>
<p>利用第二個性質，假如是empty map的話，我們可以有像是python的<a href="https://docs.python.org/3/library/collections.html#collections.defaultdict">defaultdict</a>的應用。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">package</span> main</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="op">(</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>	<span class="st">&quot;fmt&quot;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="op">)</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>	m <span class="op">:=</span> <span class="kw">map</span><span class="op">[</span><span class="dt">string</span><span class="op">]</span><span class="dt">int</span><span class="op">{}</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>	fmt<span class="op">.</span>Println<span class="op">(</span>m<span class="op">[</span><span class="st">&quot;test&quot;</span><span class="op">])</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>	m<span class="op">[</span><span class="st">&quot;test&quot;</span><span class="op">]++</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>	fmt<span class="op">.</span>Println<span class="op">(</span>m<span class="op">[</span><span class="st">&quot;test&quot;</span><span class="op">])</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>除了nil map以外，像是nil slice, nil channel也都有一些“nil safe”的操作。</p>
<p>對nil slice可以用<code>len</code>取長度，也可以做<code>append</code>操作。</p>
<p>也可以對nil channel做receive value或send value的動作。(雖然這樣會永久block住)</p>
<h2 id="reference">Reference</h2>
<ol type="1">
<li><a href="https://pragprog.com/titles/d-gobrain/go-brain-teasers/">Go Brain Teasers</a></li>
</ol>
    </section>
</article>

<comment>

    <script src="https://giscus.app/client.js" data-repo="onemouth/onemouth.github.io"
        data-repo-id="MDEwOlJlcG9zaXRvcnkyNjExMjI0MTE=" data-category="General" data-category-id="DIC_kwDOD5Bpa84COAIg"
        data-mapping="pathname" data-reactions-enabled="0" data-emit-metadata="0" data-input-position="top"
        data-theme="light" data-lang="en" crossorigin="anonymous" async>
        </script>

</comment>]]></summary>
</entry>
<entry>
    <title>如何在Hakyll中產生slide shows</title>
    <link href="https://onemouth.github.io/posts/2022-05-15-hakyll-html5-slides.html" />
    <id>https://onemouth.github.io/posts/2022-05-15-hakyll-html5-slides.html</id>
    <published>2022-05-15T00:00:00Z</published>
    <updated>2022-05-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <h1>如何在Hakyll中產生slide shows</h1>
    <section class="header">
        Posted on May 15, 2022
        
        by LT
        
    </section>
    <section>
        <p>我們不只可以讓Hykyll產生HTML網頁，得利於Hakyll背後的<a href="https://pandoc.org/">Pandoc</a>的強大能力，只要是Pandoc支援的格式，其實都可以輸出。</p>
<p>Pandoc支援許多種Slide格式，像是Slidy，reveal.js，DZSlides 等等。這篇blog主要會介紹如何讓Hakyll產生reveal.js的格式。</p>
<p>在開始之前，我們要先看一下，在Hakyll裡面，一個Item的pandoc compile的流程大致是怎麼的。</p>
<h2 id="pandoc-compile-流程">Pandoc Compile 流程</h2>
<p>利用下面的函式，我們可以把一個Item，經過Pandoc之後，轉換成HTML格式。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- 讀取檔案內容</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ot">getResourceBody ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- 將檔案內容轉換為Pandoc內部資料結構</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="ot">readPandoc ::</span> <span class="dt">Item</span> <span class="dt">String</span>  <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">Pandoc</span>) </span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co">-- 從Pandoc內部資料結構轉換為HTML格式</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="ot">writePandoc ::</span> <span class="dt">Item</span> <span class="dt">Pandoc</span> </span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>            <span class="ot">-&gt;</span> <span class="dt">Item</span> <span class="dt">String</span> </span></code></pre></div>
<p>也就是可以組合成下面的 snippet：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>compile <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>          getResourceBody</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>          <span class="op">&gt;&gt;=</span> readPandoc</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>          <span class="op">&gt;&gt;=</span> writePandoc</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>          <span class="co">-- ....</span></span></code></pre></div>
<p>因為這個套路蠻固定的，所以Hakyll直接提供了一個<code>pandocCompiler</code>，等同於上面三個的組合</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- 讀取檔案內容，經由Pandoc處理後輸出。</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ot">pandocCompiler ::</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span></code></pre></div>
<p>這邊要注意的是，<code>writePandoc</code> 必定是產生HTML格式，也就是說，它呼叫的是Pandoc的<a href="https://hackage.haskell.org/package/pandoc-2.2/docs/Text-Pandoc-Writers-HTML.html#v:writeHtml5String">writeHtml5String</a>這個函式。但因為我們想要產生reveal.js格式，所以應該要使用<a href="https://hackage.haskell.org/package/pandoc-2.2/docs/Text-Pandoc-Writers-HTML.html#v:writeRevealJs">writeRevealJs</a>函式才對。</p>
<h2 id="定義自己的-writepandoc">定義自己的 writePandoc</h2>
<p>也就是說，我們不能使用預設的<code>writePandoc</code>函式，而應該自定義一個<code>writePandocToRevealJs</code>，並在裡面呼叫Pandoc的<a href="https://hackage.haskell.org/package/pandoc-2.2/docs/Text-Pandoc-Writers-HTML.html#v:writeRevealJs">writeRevealJs</a>函式。</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">writePandocToRevealJs ::</span> <span class="dt">Item</span> <span class="dt">Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>writePandocToRevealJs <span class="ot">=</span> <span class="fu">traverse</span> <span class="op">$</span> \pandoc <span class="ot">-&gt;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> runPure (PandocWriter.writeRevealJs slidesWriterOptions pandoc) <span class="kw">of</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Left</span> err <span class="ot">-&gt;</span> <span class="fu">fail</span> <span class="op">$</span> <span class="fu">show</span> err</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Right</span> x <span class="ot">-&gt;</span> <span class="fu">return</span> (T.unpack x)</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="ot">slidesWriterOptions ::</span> <span class="dt">WriterOptions</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>slidesWriterOptions <span class="ot">=</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>  defaultHakyllWriterOptions</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    { writerHTMLMathMethod <span class="ot">=</span> <span class="dt">MathJax</span> <span class="st">&quot;&quot;</span> <span class="co">-- 使用MathJax</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>    }</span></code></pre></div>
<p>而整個Rule monad就會像下列這樣：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>  match <span class="st">&quot;slides/*&quot;</span> <span class="op">$</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">do</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>      route <span class="op">$</span> setExtension <span class="st">&quot;html&quot;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>      compile <span class="op">$</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>        <span class="kw">do</span> getResourceBody</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>          <span class="op">&gt;&gt;=</span> readPandoc</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>          <span class="op">&gt;&gt;=</span> writePandocToRevealJs</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>          <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/revealjs.html&quot;</span> postCtx</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>          <span class="op">&gt;&gt;=</span> relativizeUrls</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>
    </section>
</article>

<comment>

    <script src="https://giscus.app/client.js" data-repo="onemouth/onemouth.github.io"
        data-repo-id="MDEwOlJlcG9zaXRvcnkyNjExMjI0MTE=" data-category="General" data-category-id="DIC_kwDOD5Bpa84COAIg"
        data-mapping="pathname" data-reactions-enabled="0" data-emit-metadata="0" data-input-position="top"
        data-theme="light" data-lang="en" crossorigin="anonymous" async>
        </script>

</comment>]]></summary>
</entry>
<entry>
    <title>如何在Hakyll中設定Atom/RSS Feed</title>
    <link href="https://onemouth.github.io/posts/2022-05-06-hakyll-atom-setup.html" />
    <id>https://onemouth.github.io/posts/2022-05-06-hakyll-atom-setup.html</id>
    <published>2022-05-06T00:00:00Z</published>
    <updated>2022-05-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <h1>如何在Hakyll中設定Atom/RSS Feed</h1>
    <section class="header">
        Posted on May  6, 2022
        
        by LT
        
    </section>
    <section>
        <p>首先這是產生Atom Feed 的function：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">renderAtom ::</span> <span class="dt">FeedConfiguration</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>           <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>           <span class="ot">-&gt;</span> [<span class="dt">Item</span> <span class="dt">String</span>]</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>           <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span></code></pre></div>
<p>從function signature 可以猜出來，第一個參數是關於Configuration，第二個參數我們先不管它，第三個參數是<code>[Item String]</code>，也就是我們要產生Feed的主要內容。因為<code>renderAtom</code>的返回值是一個<code>Compiler (Item String)</code>，所以我們可以直接傳給compiler function：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  match <span class="st">&quot;posts/*&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    route <span class="op">$</span> setExtension <span class="st">&quot;html&quot;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    compile <span class="op">$</span> pandocCompiler</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span>    postCtx</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        <span class="op">&gt;&gt;=</span> saveSnapshot <span class="st">&quot;content&quot;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> postCtx</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">&gt;&gt;=</span> relativizeUrls</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>  create [<span class="st">&quot;atom.xml&quot;</span>] <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    route idRoute</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    compile <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>      posts <span class="ot">&lt;-</span> <span class="fu">fmap</span> (<span class="fu">take</span> <span class="dv">15</span>) <span class="op">.</span> recentFirst <span class="op">=&lt;&lt;</span> loadAllSnapshots <span class="st">&quot;posts/*&quot;</span> <span class="st">&quot;content&quot;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>      renderAtom feedConfiguration <span class="op">?</span> posts</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="ot"> feedConfiguration ::</span> <span class="dt">FeedConfiguration</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a> feedConfiguration <span class="ot">=</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>   <span class="dt">FeedConfiguration</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>   { feedTitle <span class="ot">=</span> <span class="st">&quot;Put some ink into the inkpot&quot;</span>,</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>     feedDescription <span class="ot">=</span> <span class="st">&quot;Put some ink into the inkpot - a personal blog&quot;</span>,</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>     feedAuthorName <span class="ot">=</span> <span class="st">&quot;LT Tsai&quot;</span>,</span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>     feedAuthorEmail <span class="ot">=</span> <span class="st">&quot;lt@ltt.pw&quot;</span>,</span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>     feedRoot <span class="ot">=</span> <span class="st">&quot;https://onemouth.github.io&quot;</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>   }</span></code></pre></div>
<p>那我們現在就只剩下第二個參數<code>Context String</code>了，首先我們要知道，在Hakyll中，<code>Context</code>代表的是很多key-value所形成的一個集合。此外， <code>Context</code>是一個Monoid，所以用<code>mappend</code>就可以新增key-value到<code>Conxtext</code>裡面。而當template需要某一個key的值，就可以從<code>Context</code>中獲得。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">postCtx ::</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>postCtx <span class="ot">=</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  dateField <span class="st">&quot;date&quot;</span> <span class="st">&quot;%B %e, %Y&quot;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="ot">`mappend`</span> defaultContext</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="ot">feedCtx ::</span> <span class="dt">Context</span> <span class="dt">String</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>feedCtx <span class="ot">=</span> postCtx <span class="op">&lt;&gt;</span> bodyField <span class="st">&quot;description&quot;</span> </span></code></pre></div>
<p>defaultContext裡面的key包括:</p>
<ul>
<li><code>$body$</code>: Item 的內容</li>
<li><code>$url$</code>: Item 的URL</li>
<li><code>$path$</code>: Item 的原始檔案路徑</li>
<li><code>$foo$</code>: 任何包括在Metadata中的資料</li>
</ul>
<p>defaultContext 並不包含date的資訊，所以我們用<code>dateField</code>把寫在檔案路徑的日期parse出來，並放在<code>postCtx</code>裡面。</p>
<p>另外，在feed的預設template裡面，需要一個description的key，而在目前大部分RSS的網站實作中，description都是直接放文章的完整內容，所以這邊我們用<code>bodyField</code>，把description指向body的內容。</p>
<p>最後，我們產生Feed的程式碼就像這樣：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>  create [<span class="st">&quot;atom.xml&quot;</span>] <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    route idRoute</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    compile <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>      posts <span class="ot">&lt;-</span> <span class="fu">fmap</span> (<span class="fu">take</span> <span class="dv">15</span>) <span class="op">.</span> recentFirst <span class="op">=&lt;&lt;</span> loadAllSnapshots <span class="st">&quot;posts/*&quot;</span> <span class="st">&quot;content&quot;</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>      renderAtom feedConfiguration feedCtx posts</span></code></pre></div>
    </section>
</article>

<comment>

    <script src="https://giscus.app/client.js" data-repo="onemouth/onemouth.github.io"
        data-repo-id="MDEwOlJlcG9zaXRvcnkyNjExMjI0MTE=" data-category="General" data-category-id="DIC_kwDOD5Bpa84COAIg"
        data-mapping="pathname" data-reactions-enabled="0" data-emit-metadata="0" data-input-position="top"
        data-theme="light" data-lang="en" crossorigin="anonymous" async>
        </script>

</comment>]]></summary>
</entry>
<entry>
    <title>iCloud上的酷東西-自訂電子郵件網域</title>
    <link href="https://onemouth.github.io/posts/2022-05-03-icloud-cool-things.html" />
    <id>https://onemouth.github.io/posts/2022-05-03-icloud-cool-things.html</id>
    <published>2022-05-03T00:00:00Z</published>
    <updated>2022-05-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <h1>iCloud上的酷東西-自訂電子郵件網域</h1>
    <section class="header">
        Posted on May  3, 2022
        
        by LT
        
    </section>
    <section>
        <p>從2019開始就開始訂閱iCloud的儲存空間200G，因為免費的5GB實在不夠，加上可以和家人共享，就一直訂閱著，平常也不會去注意它有什麼新功能。</p>
<p>最近才發現，這個訂閱服務早在2021就變成了<a href="https://support.apple.com/zh-tw/HT201238">iCloud Plus</a>，主要增加了幾個功能:</p>
<ul>
<li>隱藏我的電子郵件</li>
<li><a href="https://support.apple.com/en-us/HT212514">自訂電子郵件網域</a></li>
<li>HomeKit安全錄影</li>
</ul>
<p>剛好最近手上有個網域，我也一直想用綁個自己網域的email帳號，而不要再用<code>@gmail.com</code>，因為用自己的網域，感覺比較專業(?)</p>
<p>當然也可以考慮自己架，收信似乎不難，但是寄信非常容易被當成垃圾郵件丟掉，要設定好<a href="https://en.wikipedia.org/wiki/Sender_Policy_Framework">SPF</a>，<a href="https://en.wikipedia.org/wiki/DomainKeys_Identified_Mail">DKIM</a>和<a href="https://en.wikipedia.org/wiki/DMARC">DMARC</a>之類東西的樣子…所以網路上建議寄信的話再轉給Amazon SES處理，想想還是蠻複雜的。</p>
<p>雲端服務的話，Gmail只有企業版才提供自訂網域的功能，其他像<a href="https://protonmail.com/support/knowledge-base/paid-plans/">ProtonMail</a>雖然在付費版也有提供自訂網域，但每個月還要再多付約100元台幣訂閱，想了想，還是用iCloud Plus的就好，畢竟加量不加價！</p>
<p>我的email： lt at ltt.pw</p>
<p>請多指教!</p>
    </section>
</article>

<comment>

    <script src="https://giscus.app/client.js" data-repo="onemouth/onemouth.github.io"
        data-repo-id="MDEwOlJlcG9zaXRvcnkyNjExMjI0MTE=" data-category="General" data-category-id="DIC_kwDOD5Bpa84COAIg"
        data-mapping="pathname" data-reactions-enabled="0" data-emit-metadata="0" data-input-position="top"
        data-theme="light" data-lang="en" crossorigin="anonymous" async>
        </script>

</comment>]]></summary>
</entry>
<entry>
    <title>10隻老鼠和1000個瓶子，其中一瓶有毒藥</title>
    <link href="https://onemouth.github.io/posts/2022-03-12-poision-and-rats.html" />
    <id>https://onemouth.github.io/posts/2022-03-12-poision-and-rats.html</id>
    <published>2022-03-12T00:00:00Z</published>
    <updated>2022-03-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <h1>10隻老鼠和1000個瓶子，其中一瓶有毒藥</h1>
    <section class="header">
        Posted on March 12, 2022
        
        by LT
        
    </section>
    <section>
        <p>現在有10隻老鼠和1000個瓶子，其中一瓶有毒藥，另外999瓶裡面是普通的水。從外觀上分辨不出水和毒藥。喝下毒藥的生物會在一星期之後死亡，你如何利用手上的老鼠，在一星期之後，正確回答那個瓶子裡面裝的是毒藥？</p>
<p>這是我在面試的時候，被實際問到的問題，當下因為第一個想法是想用binary search來做，但用binary search的話，需要多次實驗，沒辦法在一星期之後立刻得到結果，所以在沒得到進一步提示的情況下，就卡住了。</p>
<p>上網找了一下，似乎也是一道經典題了。我們先把問題簡化一下，假設現在是3隻老鼠和8個瓶子，其中一瓶有毒藥，要如何在一星期後找出來呢？</p>
<p>因為我們現在手上有3隻老鼠，假設編號為<code>A</code>,<code>B</code>,<code>C</code>，然後我們用<code>1</code>代表老鼠死亡，用<code>0</code>代表老鼠存活，在一星期之後全部老鼠的存活情形如下：</p>
<table>
<caption>3隻老鼠的存活狀態</caption>
<thead>
<tr class="header">
<th>A</th>
<th>B</th>
<th>C</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="odd">
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="even">
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr class="odd">
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="odd">
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="even">
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>也就是說，老鼠的死活情形，剛好有8種 (2^3)，所以我們可以試著把這8種情形對應到8個瓶子上，假如三隻老鼠都活著，那就是第一個瓶子有毒藥，假如三隻都死了，那就是第八個瓶子有毒藥，以此類推。</p>
<p>從這個表，由上往下，就是3隻老鼠個別需要喝的瓶子，<code>A</code>老鼠需要喝第5,6,7,8號瓶子，<code>B</code>老鼠需要喝3,4,7,8號瓶子，<code>C</code>老鼠則需要喝2,4,6,8號瓶子。</p>
<p>這是3隻老鼠的情形，瞭解之後，要推廣到10隻老鼠的情形也很容易了！</p>
    </section>
</article>

<comment>

    <script src="https://giscus.app/client.js" data-repo="onemouth/onemouth.github.io"
        data-repo-id="MDEwOlJlcG9zaXRvcnkyNjExMjI0MTE=" data-category="General" data-category-id="DIC_kwDOD5Bpa84COAIg"
        data-mapping="pathname" data-reactions-enabled="0" data-emit-metadata="0" data-input-position="top"
        data-theme="light" data-lang="en" crossorigin="anonymous" async>
        </script>

</comment>]]></summary>
</entry>
<entry>
    <title>三個學日文必備的瀏覽器擴充套件</title>
    <link href="https://onemouth.github.io/posts/2022-03-10-japanese-plugins.html" />
    <id>https://onemouth.github.io/posts/2022-03-10-japanese-plugins.html</id>
    <published>2022-03-10T00:00:00Z</published>
    <updated>2022-03-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
    <h1>三個學日文必備的瀏覽器擴充套件</h1>
    <section class="header">
        Posted on March 10, 2022
        
        by LT
        
    </section>
    <section>
        <div class="toc"><div class="header">Table of Contents</div>
<ul>
<li><a href="#yomichan"><span class="toc-section-number">1</span> Yomichan</a></li>
<li><a href="#absolute-enable-right-click-copy"><span class="toc-section-number">2</span> Absolute Enable Right Click &amp; Copy</a></li>
<li><a href="#google-search---geolocation-language-change"><span class="toc-section-number">3</span> Google Search - Geolocation &amp; Language Change</a></li>
<li><a href="#小結"><span class="toc-section-number">4</span> 小結</a></li>
</ul>
</div>
<p>在學習日文的過程中，也慢慢地使用一些擴充套件來增進學習的效果，所以想介紹三個我覺得是必備的擴充套件。分別為:</p>
<ul>
<li>Yomichan (<a href="https://addons.mozilla.org/zh-TW/firefox/addon/yomichan/">Firefox</a>, <a href="https://chrome.google.com/webstore/detail/yomichan/ogmnaimimemjmbakcfefmnahgdfhfami">Chrome</a>)</li>
<li>Absolute Enable Right Click &amp; Copy (<a href="https://addons.mozilla.org/zh-TW/firefox/addon/absolute-enable-right-click/">Firefox</a>, <a href="https://chrome.google.com/webstore/detail/absolute-enable-right-cli/jdocbkpgdakpekjlhemmfcncgdjeiika">Chrome</a>)</li>
<li>Google Search - Geolocation &amp; Language Change (<a href="https://addons.mozilla.org/zh-TW/firefox/addon/googlesearchgeolocationlang/">Firefox</a>, <a href="https://chrome.google.com/webstore/detail/google-search-geolocation/gglakldnncaidfodbmpaodhdknnlkjbb">Chrome</a>)</li>
</ul>
<p>其中Yomichan是最重要的，它是我們主要用來查詢日文的工具，後面兩個則可以起到輔助的作用。</p>
<h1 data-number="1" id="yomichan"><span class="header-section-number">1</span> Yomichan</h1>
<p><a href="https://foosoft.net/projects/yomichan/">Yomichan</a>是一個可以幫助我們在看日文網頁的時候，查詢單字的擴充套件，只要選取網頁上的字，再按下Shift鍵，就可以顯示這個日文單字的意思，十分方便。</p>
<p><img src="/images/yomichan.png" /></p>
<p>在安裝完Yomichan之後，是沒有任何字典的，我們必須先手動下載字典檔後，再做一個匯入的動作。<a href="https://foosoft.net/projects/yomichan/#dictionaries">字典檔</a>可以在官網找到。</p>
<p>我目前使用的有：</p>
<ul>
<li>JMDict (Englsih)</li>
<li>JMnedict</li>
<li>Kanjium Pitch Accents</li>
</ul>
<p>JMDict是一個免費的日英字典，幾乎絕大部分的字都可以找到。JMnedict則是專門收錄名字的字典，例如姓氏、人名或產品名稱等等，都可以在這個字典找到唸法。Kanjium則是針對日文聲調的部分，它會幫助顯示出這個單字重音的位置。</p>
<p>這些字典下載下來之後，是一個zip檔，不需要解壓縮，直接到Yomichan的管理頁面匯入就可以使用了。</p>
<p><img src="/images/yomichan2.png" /></p>
<p>另外除了上述資源外，也可以匯入其它的自製字典檔，有興趣的人可以到這個<a href="https://learnjapanese.moe/">網站</a>找尋其他資源。</p>
<h1 data-number="2" id="absolute-enable-right-click-copy"><span class="header-section-number">2</span> Absolute Enable Right Click &amp; Copy</h1>
<p>有些網頁會禁止我們選取上面的文字，例如歌詞網站或是一些影音串流平台。不能選取的話，我們就不能利用Yomichan來幫忙閱讀了，這時候，就是這個擴充套件出場的時候了。</p>
<p>在安裝之後，只要啟動這個擴充套件的<code>Enable Copy</code>功能，就可以在原本不能選取的網頁正常選取了！</p>
<p><img src="/images/copyText.png" /></p>
<h1 data-number="3" id="google-search---geolocation-language-change"><span class="header-section-number">3</span> Google Search - Geolocation &amp; Language Change</h1>
<p>不知道大家會不會跟我有一樣的困擾——覺得Google越來越難用，現在即使是搜尋英文單字或日文漢字，也總是一堆中文的內容農場網頁排在前面，實在蠻困擾的，想要找個在地的結果，卻幾乎找不到。</p>
<p>還好，終於發現這個擴充功能，可以輕鬆的改變搜尋時候的地理位置和語言設定。</p>
<p><img src="/images/location.png" /></p>
<p>安裝完後，在Google的搜尋頁面，會多出一個Location的按鈕，只要點下去，就可以選擇要轉換的地區和語言了，是不是很方便！</p>
<h1 data-number="4" id="小結"><span class="header-section-number">4</span> 小結</h1>
<p>這是我最近覺得非介紹不可的擴充功能，有其它好用的擴充功能，也請推薦！</p>

    </section>
</article>

<comment>

    <script src="https://giscus.app/client.js" data-repo="onemouth/onemouth.github.io"
        data-repo-id="MDEwOlJlcG9zaXRvcnkyNjExMjI0MTE=" data-category="General" data-category-id="DIC_kwDOD5Bpa84COAIg"
        data-mapping="pathname" data-reactions-enabled="0" data-emit-metadata="0" data-input-position="top"
        data-theme="light" data-lang="en" crossorigin="anonymous" async>
        </script>

</comment>]]></summary>
</entry>

</feed>
